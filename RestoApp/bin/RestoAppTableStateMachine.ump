class Table {
   status {
      Available {
         startOrder() / {
            new Order(new java.sql.Date(Calendar.getInstance().getTime().getTime()), new java.sql.Time(Calendar.getInstance().getTime().getTime()), this.getRestoApp(), this);
         } -> NothingOrdered;
         addToOrder(Order o) / {
            o.addTable(this);
         } -> NothingOrdered; 
      }
      NothingOrdered {
         orderItem(int quantity, Order o, Seat s, PricedMenuItem i) [quantityIsPositive(quantity)] / {
            // create a new order item with the provided quantity, order, seat, and priced menu item
            new OrderItem(quantity, i, o, s);
         } -> Ordered; 
         addToOrderItem(OrderItem i, Seat s) / {
            // add provided seat to provided order item unless seat has already been added, in which case nothing needs to be done
            i.addSeat(s);
         } -> Ordered;
         endOrder(Order o) / {
            if (!o.removeTable(this)) {
               if (o.numberOfTables() == 1) {
                  o.delete();
               }
            }
         } -> Available;
      }
      Ordered {
         orderItem(int quantity, Order o, Seat s, PricedMenuItem i) [quantityIsPositive(quantity)] / {
            // create a new order item with the provided quantity, order, seat, and priced menu item
            new OrderItem(quantity, i, o, s);
         } -> Ordered; 
         addToOrderItem(OrderItem i, Seat s) / {
            // add provided seat to provided order item unless seat has already been added, in which case nothing needs to be done
            i.addSeat(s);
         } -> Ordered;
         cancelOrderItem(OrderItem i) [iIsLastItem(i)] / {
            // delete order item
            i.delete();
         } -> NothingOrdered;
         cancelOrderItem(OrderItem i) [!iIsLastItem(i)] / {
            // delete order item
            i.delete();
         } -> Ordered;
         cancelOrder() / {
            // delete all order items of the table
            int currentOrderIndex = this.numberOfOrders()-1;
            Order currentOrder = this.getOrder(currentOrderIndex);
            List<OrderItem> orderItems = currentOrder.getOrderItems();
            while(orderItems.size() > 0)
            {
    			orderItems.get(0).delete();        
            }
         } -> NothingOrdered;
         billForSeat(Order o, Seat s) / {
            // create a new bill with the provided order and seat; if the provided seat is already assigned to
            // another bill for the current order, then the seat is first removed from the other bill and if no seats
            // are left for the bill, the bill is deleted
            
            if (s.numberOfBills() != 0) {
                Bill lastBill = s.getBill(s.numberOfBills()-1);
        	  	if(o.getBills().contains(lastBill)) {
        			lastBill.removeIssuedForSeat(s);
        			if(lastBill.numberOfIssuedForSeats() == 0)
        				lastBill.delete();
        	 	}
            }
    	  	RestoApp r = o.getRestoApp();
    	  	r.addBill(o, s);
            
         } -> Ordered;
         addToBill(Bill b, Seat s) / {
            // add provided seat to provided bill unless seat has already been added, in which case nothing needs
            // to be done; if the provided seat is already assigned to another bill for the current order, then the
            // seat is first removed from the other bill and if no seats are left for the bill, the bill is deleted
            
            List<Seat> billedSeats = b.getIssuedForSeats();
		  	if(billedSeats.contains(s)) {
			  Bill lastBill = s.getBill(s.numberOfBills()-1);
			  Table table = s.getTable();
			  Order currentOrder = table.getOrder(table.numberOfOrders()-1);
			  if(currentOrder.getBills().contains(lastBill)) {
				  lastBill.removeIssuedForSeat(s);
				  if(lastBill.numberOfIssuedForSeats() == 0)
					  lastBill.delete();
			 }
			 b.addIssuedForSeat(s);
		  }
            
         } -> Ordered;
         endOrder(Order o) [allSeatsBilled()] / {
         } -> Available;
      }
   }
   
   // check that the provided quantity is an integer greater than 0
   private boolean quantityIsPositive(int quantity) {
      return quantity > 0;
   }

   //private boolean highChairAvailable(){
   //   return !(quantity >= 3);
   //}

   // check that the provided order item is the last item of the current order of the table
   private boolean iIsLastItem(OrderItem i) {
      return i.getOrder().numberOfOrderItems() == 1;
   }

   // check that all seats of the table have a bill that belongs to the current order of the table 
   private boolean allSeatsBilled() {
	   Order order = getOrder(numberOfOrders()-1);
	   
	   //creates list of seats that are in use (and belong to relevant table)
	   List<OrderItem> orderItems = order.getOrderItems();
	   ArrayList<Seat> usedSeats = new ArrayList<Seat>();
	   for(OrderItem orderItem : orderItems) {
		   for(Seat seat : orderItem.getSeats()) {
			   if(currentSeats.contains(seat) && !usedSeats.contains(seat))
				   usedSeats.add(seat);
		   }
	   }
	   
	   //goes through used seats and determines if it is in any bill of the current order
	   List<Bill> bills = order.getBills();
	   for(Seat seat : usedSeats) {
		   Boolean seatBilled = false;
		   for(Bill bill : bills) {
			   if(bill.getIssuedForSeats().contains(seat)) {
				   seatBilled = true;
				   break;
			   }
		   }
		   if(!seatBilled)
			   return false;
	   }
      return true;
   }

}
